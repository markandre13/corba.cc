interface Peer {
    string callString(in string value);
};

// use RemoteObject and test it with sequence to get the copy routines right...
interface RemoteObject {
    readonly attribute string id;
    attribute string name;
};

struct RGBA {
    octet r, g, b;
    octet a;
};

interface Interface {

    readonly attribute string roAttribute;
    attribute string rwAttribute;

    boolean callBoolean(in boolean value);

    octet callOctet(in octet value);

    unsigned short callUShort(in unsigned short value);
    unsigned long callUnsignedLong(in unsigned long value);
    unsigned long long callUnsignedLongLong(in unsigned long long value);

    short callShort(in short value);
    long callLong(in long value);
    long long callLongLong(in long long value);

    float callFloat(in float value);
    double callDouble(in double value);

    string callString(in string value);
    oneway void recvString(in string value); 
    sequence<octet> callBlob(in sequence<octet> value);

    RGBA callStruct(in RGBA rgba);

    // TODO: sequence of integer types
    sequence<float> callSeqFloat(in sequence<float> value);
    sequence<double> callSeqDouble(in sequence<double> value);
    sequence<string> callSeqString(in sequence<string> value);

    sequence<RGBA> callSeqRGBA(in sequence<RGBA> value);
    // sequence<Peer> getSeqPeer();

    // there is a C++11 mapping for CORBA. (formal-14-01-01.pdf) i haven't been aware of
    //
    // 6.7.8 Argument Passing Considerations
    // The mapping of parameter passing modes is focused at simplicity and ease of use.
    // For all primitive types, enums, and reference types, an in argument A of type P, that argument is passed as P.
    // For all other types, an in argument A of type P is passed as const P&.
    // For an inout and out argument it is passed as P&.
    // If we return a type of P, it is returned as P.
    //
    // check C++ RVO and NRVO for efficiency, though it doesn't cover returning non-temporary values
    //
    // https://stackoverflow.com/questions/15704565/efficient-way-to-return-a-stdvector-in-c
    // see also 6.12 Mapping for Sequence types and 6.13 Mapping for Array Types

    sequence<RemoteObject> getRemoteObjects();

    void setPeer(in Peer peer);
    string callPeer(in string value);
};

interface Client
{
	void ping();
};

interface Server {
	oneway void addClient(in Client client);
};